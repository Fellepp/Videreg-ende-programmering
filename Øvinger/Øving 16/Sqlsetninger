-- Oppgave a) List ut all informasjon (ordrehode og ordredetalj) om ordrer for leverandør nr 44.
SELECT * FROM ordrehode JOIN ordredetalj ON ordrehode.ordrenr = ordredetalj.ordrenr WHERE levnr = 44;

-- Oppgave b) Finn navn og by ("LevBy") for leverandører som kan levere del nummer 1.
SELECT navn, levby FROM levinfo INNER JOIN prisinfo ON levinfo.levnr = prisinfo.levnr WHERE delnr = 1;

-- Oppgave c) Finn nummer, navn og pris for den leverandør som kan levere del nummer 201 til billigst pris.
SELECT levinfo.levnr, navn, MIN(pris) AS 'Billigste pris' FROM levinfo JOIN prisinfo ON levinfo.levnr = prisinfo.levnr WHERE  delnr = 201;

-- Oppgave d) Lag fullstendig oversikt over ordre nr 16, med ordrenr, dato, delnr, beskrivelse, kvantum, (enhets-)pris og beregnet beløp (=pris*kvantum).
SELECT ordrenr, dato, delnr, beskrivelse, kvantum, pris AS 'enhetspris', pris*kvantum AS 'beregnet beløp'
FROM ordredetalj NATURAL JOIN ordrehode NATURAL JOIN delinfo NATURAL JOIN prisinfo
WHERE ordrehode.ordrenr = 16;

-- Oppgave e) Finn delnummer og leverandørnummer for deler som har en pris som er høyere enn prisen for del med katalognr X7770.
SELECT delnr, levnr FROM prisinfo WHERE pris > (SELECT pris FROM prisinfo WHERE katalognr = 'X7770');

-- Oppgave f) Tenk deg at tabellen levinfo skal deles i to. Sammenhengen mellom by og fylke skal tas ut av tabellen.
-- i)Det er unødvendig å lagre fylketilhørigheten for hver forekomst av by. Lag én ny tabell som inneholder byer og fylker.
-- Fyll denne med data fra levinfo. Lag også en tabell som er lik levinfo unntatt kolonnen Fylke.
-- (Denne splittingen av tabellen levinfo gjelder bare i denne oppgaven. I resten av oppgavesettet antar du at du har den opprinnelige levinfo-tabellen.)

DROP TABLE IF EXISTS fylke_by;
DROP TABLE IF EXISTS levinfo_1;

CREATE TABLE fylke_by (
  levby VARCHAR(20) NOT NULL,
  fylke VARCHAR(20) NOT NULL,
  PRIMARY KEY (levby)
);

CREATE TABLE levinfo_1(
  levnr INTEGER,
  navn VARCHAR(20) NOT NULL,
  adresse VARCHAR(20) NOT NULL,
  postnr INTEGER NOT NULL,
  levby VARCHAR(20) NOT NULL,
  FOREIGN KEY (levby) REFERENCES fylke_by(levby),
  PRIMARY KEY (levnr)
);

-- ii) Lag en virtuell tabell (view) slik at brukerne i størst mulig grad kan jobbe på samme måte mot de to nye tabellene som den gamle.
-- Prøv ulike kommandoer mot tabellen (select, update, delete, insert).
-- Hvilke begrensninger, hvis noen, har brukerne i forhold til tidligere? Kan ikke endre eller inserte data via View
DROP VIEW IF EXISTS fylkeview;
CREATE VIEW fylkeview AS
  SELECT * FROM levinfo_1 NATURAL JOIN fylke_by;
SELECT * FROM fylkeview; -- Ingen testdata

-- Oppgave g) Anta at en vurderer å slette opplysningene om de leverandørene som ikke er representert i Prisinfo-tabellen.
-- Finn ut hvilke byer en i tilfelle ikke får leverandør i. (Du skal ikke utføre slettingen.) (Tips: Svaret skal bli kun én by, "Ål".)
SELECT levby FROM levinfo WHERE levby NOT IN (SELECT levby FROM levinfo NATURAL JOIN prisinfo);

-- Oppgave h) Finn leverandørnummer for den leverandør som kan levere ordre nr 18 til lavest totale beløp (vanskelig).

-- View som viser de som leverer deler av eller hele ordre 18
DROP VIEW IF EXISTS h;
CREATE VIEW h AS
SELECT levnr, ordredetalj.delnr, pris, kvantum, pris*kvantum AS 'Beregnet pris'
FROM ordredetalj JOIN prisinfo ON ordredetalj.delnr = prisinfo.delnr
WHERE ordredetalj.ordrenr = 18;
SELECT * FROM h;

-- View som eliminerer de som ikke inneholder hele orderen (levnr 9)
DROP VIEW IF EXISTS i;
CREATE VIEW i AS
SELECT * FROM h WHERE levnr IN (SELECT levnr FROM h
GROUP BY levnr HAVING COUNT(DISTINCT delnr) =  (SELECT COUNT(DISTINCT delnr) FROM h));
SELECT * FROM i;

-- View på sum av beregnet pris
DROP VIEW IF EXISTS s;
CREATE VIEW s AS
SELECT levnr, SUM(`Beregnet pris`) AS 'sum' FROM i GROUP BY levnr;
SELECT * FROM s;

-- Finner billigste
SELECT levnr, MIN(sum) FROM s;

-- Oppgave 2
-- a)Sett opp en SELECT-setning som er UNION mellom alle forlag med Oslo-nummer
-- (telefonnummer begynner med 2) og alle som ikke er Oslo-nummer.
-- Får du med forlaget med NULL-verdi på telefonnummer?
-- Hvis ikke, utvid unionen med en mengde til.

SELECT * FROM forlag;

SELECT * FROM forlag WHERE SUBSTR(forlag.telefon, 1,1) = 2
UNION
SELECT * FROM forlag WHERE SUBSTR(forlag.telefon, 1,1) != 2
UNION
SELECT * FROM forlag WHERE forlag.telefon IS null;

-- b)Sett opp SQL-setninger som finner gjennomsnittlig alder på forfattere der
-- fødselsåret er oppgitt. For forfattere der dødsåret ikke er oppgitt,
-- skal du kun ta med de som er født etter 1900.  Tips for å få ut året i år:
-- MySQL: SELECT YEAR(CURRENT_DATE) FROM ... hvilken tabell som helst ...

SELECT * FROM forfatter;

DROP VIEW IF EXISTS avgAlder;
CREATE VIEW avgAlder AS
SELECT CONCAT(fornavn, ' ', etternavn) AS 'navn', (dod_aar-fode_aar) AS 'alder' FROM forfatter WHERE fode_aar IS NOT NULL AND dod_aar IS NOT NULL
UNION
SELECT CONCAT(fornavn, ' ', etternavn) AS 'navn', YEAR(CURRENT_DATE)-fode_aar AS 'alder' FROM forfatter WHERE dod_aar IS NULL AND fode_aar >= 1900;
SELECT * FROM avgAlder;

SELECT AVG(alder) FROM avgAlder;

-- Oppgave c) Sett opp SQL-setninger som finner hvor stor andel av
-- forfatterne som ble med i beregningene under b).
SELECT COUNT(*)/(SELECT COUNT(*) FROM forfatter)*100 AS prosentandel FROM avgAlder;





